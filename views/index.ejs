<%- include('common/header') %>
<title><%= title %></title>
<script src="https://d3js.org/d3.v6.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
<link rel="stylesheet" type="text/css" href="stylesheets/index.css">
<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap" rel="stylesheet">

<body>
<div class="home-page" id="home">
    <div class="mapcontainer">
        <div class="euro">
            <svg id="europeMap" class="europe-map" width="800" height="300"></svg>
        </div>
    </div>

    <div class="mapcontainer">
        <div class="infobox">
            <p id="countryclicked">Country clicked displays here.</p>
            <p id="errorcountryclicked"></p>
            <p id="apidata"></p>
            <p id="apidata2"></p>
        </div>
    </div>

    <div class="apicontainer">
        <div class="apidisplay">
            <p id="apitemp"></p>
            <p id="apitemp2"></p>
            <p id="apitemp3"></p>
        </div>
    </div>


<div class="apicontainer2">
    <div class="apidisplay">
        <p>
            <button onclick=selector("gdp")>   GDP   </button>
            <button onclick=selector("happiness")> Happiness </button>
            <button onclick=selector("corruption")> Corruption </button>
            <button onclick=selector("health")>  Health  </button>
            <button onclick="destroyandRender()">Refresh Graph</button><br><br>
        </p>
        <p id="infoheader"></p>
    </div>
</div>
    <div class='apicontainer'>
        <div class="graph1">
            <canvas id="chart1" width="200" height="200"></canvas>
        </div>
    </div>

</div>


<%- include('common/footer') %>

<!--This is a D3.Js Map Created By Graham,Eduard and James-->
<!--as part of the Major Group Project.-->

<!--This Script Will be moved to a Script.Js File after testing.-->

<script>
    let countryName;
    let countriesSelected = [];
    let graphdata = [];
    let graphdata2 = [];
    let graphdata3 = [];
    let labeldata = [];
    let labeldata2 = [];
    let labeldata3 = [];
    let namedata = [];
    let namedata2 = [];
    let namedata3 = [];
    let chart;
    let CasesTotal = 0;
    let trigger = 0;
    let buttonBool = false;
    let selectedItem;

    // Call Chart Function to build chart
    chartIT();

    async function chartIT() {
        const ctx = document.getElementById('chart1').getContext('2d')
        chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labeldata,
                datasets: [{
                    label: namedata,
                    data: graphdata,
                    backgroundColor: ['rgba(0,100,255,0.27)'],
                    borderColor: ['rgb(0,0,0)',],
                    borderWidth: 2,
                    hoverOffset: 4,
                }, {
                    label: namedata2,
                    data: graphdata2,
                    backgroundColor: ['rgba(255,0,0,0.37)'],
                    borderColor: ['rgb(0,0,0)',],
                    borderWidth: 2,
                    hoverOffset: 4,
                }, {
                    label: namedata3,
                    data: graphdata3,
                    backgroundColor: ['rgba(255,0,200,0.37)'],
                    borderColor: ['rgb(0,0,0)',],
                    borderWidth: 2,
                    hoverOffset: 4,
                }
                ],
            },
        });
    }

    // Create an Svg variable
    const svg = d3.select("svg"),
        width = +svg.attr("width")

    // Map and projection
    const projection = d3.geoNaturalEarth1()
        .scale(width / 1.9) // Lower the num closer the zoom
        .translate([200, 550])  // (Horizontal, Vertical)

    // Load external data from geographic api and use data to project path info from map.
    d3.json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson").then(function (data) {
        svg.append("g")
            .selectAll("path")
            .data(data.features)
            .join("path")
            .style("stroke", "white")// Border Lines
            .attr("fill", "#348C31") // Color Of Country
            .attr("d", d3.geoPath().projection(projection))
            .on('click', function (d, i) {

                if(buttonBool === true) {
                    //weatherHandler(i);
                    //covHandler(i);
                    gdpHandler(i);

                    if (countriesSelected.includes(i.properties.name) === true) {
                        countriesSelected.splice(countriesSelected.indexOf(i.properties.name), 1);
                        d3.select(this).style("fill", '#348C31');
                    } else if (countriesSelected.includes(i.properties.name) === false) {
                        countriesSelected.push(i.properties.name);
                        d3.select(this).style("fill", '#03a5fd');
                        document.getElementById("countryclicked").innerHTML = "Countries Selected : " + countriesSelected[0] + " , " + countriesSelected[1] + " , " + countriesSelected[2];
                    }
                }
                else window.alert("Please Select a Data Value from the Buttons below")
            })
    })


    async function getCurrentCovid(countryName, counter) {
        let countryID = isCovidDataAvailable(countryName);
        const response = await fetch("https://covid19-eu-data-api-gamma.vercel.app/api/countries?alpha2=" + countryID + "&days=10");
        const data = await response.json();

        if (counter === 1) {
            for (let j = 0; j < data.length; j++) {
                let dailytotal = 0;
                for (let i = 0; i < data[j].records.length; i++) {
                    dailytotal = (data[j].records[i].cases + dailytotal);
                }
                graphdata.push(dailytotal);
                labeldata.push(data[j].date);
            }
            namedata.push(countryName);
            console.log(graphdata);
            console.log(labeldata);
            chart.update();
        }
        if (counter === 2) {
            for (let j = 0; j < data.length; j++) {
                let dailytotal = 0;
                for (let i = 0; i < data[j].records.length; i++) {
                    dailytotal = (data[j].records[i].cases + dailytotal);
                }
                graphdata2.push(dailytotal);
                labeldata2.push(data[j].date);
            }
            namedata2.push(countryName);
            console.log(graphdata);
            console.log(labeldata);
            chart.update();
        }
        if (counter === 3) {
            for (let j = 0; j < data.length; j++) {
                let dailytotal = 0;
                for (let i = 0; i < data[j].records.length; i++) {
                    dailytotal = (data[j].records[i].cases + dailytotal);
                }
                graphdata3.push(dailytotal);
                labeldata3.push(data[j].date);
            }
            namedata3.push(countryName);
            console.log(graphdata);
            console.log(labeldata);
            chart.update();
        }

    }

    function selector(input){
        selectedItem = input;
        buttonBool = true;
    }
    function gdpHandler(i){
        countryName = i.properties.name;

        if (trigger === 0) {
            getGDP(countryName,selectedItem);
            trigger++;
        } else if (trigger === 1) {
            getGDP(countryName,selectedItem);
            trigger++;
        } else if(trigger === 2){
            getGDP(countryName,selectedItem);
            trigger++;
        }else if(trigger === 3){
            getGDP(countryName,selectedItem);
            trigger++;
        }
        else if(trigger === 4){
            getGDP(countryName,selectedItem);
            trigger++
        }
        else if(trigger === 5){
            getGDP(countryName,selectedItem);
            trigger++
        }
        else if(trigger === 6){
            getGDP(countryName,selectedItem);
            trigger++
        }
        chart.update();
    }


    async function getGDP(countryName,selectedItem) { // Api Info -> https://world-happiness-database.herokuapp.com/
        let url = "https://world-happiness-database.herokuapp.com/api/happiness_explain/"+countryName+"";
        const response = await fetch(url);
        let apidata = await response.json();
        if(selectedItem === "gdp"){
            document.getElementById("infoheader").innerHTML = "GDP Per Capita 2022";
            graphdata.push(apidata[0].gdpPerCap);
            labeldata.push(countryName);
        }
        if(selectedItem === "happiness"){
            document.getElementById("infoheader").innerHTML = "Happiness Score in Index 2020";
            graphdata.push(apidata[0].happiness);
            labeldata.push(countryName);
        }
        if(selectedItem === "corruption"){
            document.getElementById("infoheader").innerHTML = "Country Corruption Score";
            graphdata.push(apidata[0].corruption);
            labeldata.push(countryName);
        }
        if(selectedItem === "health"){
            document.getElementById("infoheader").innerHTML = "Average Health score per country 2020";
            graphdata.push(apidata[0].health);
            labeldata.push(countryName);
        }
        chart.update();
        console.log(apidata);
    }

    function covHandler(i) {
        if (trigger === 0) {
            getCurrentCovid(i.properties.name,1);
            trigger++;
        } else if (trigger === 1) {
            getCurrentCovid(i.properties.name,2);
            trigger++;
        } else getCurrentCovid(i.properties.name,3);
        chart.update();
    }

    function destroyandRender(){
        document.getElementById("infoheader").innerHTML = "Graph Data is now refreshed";
        chart.destroy();
        graphdata = [];
        labeldata = [];
        chartIT();
        chart.update;
    }

    function weatherHandler(i) {
        if (trigger === 0) {
            getCurrentWeather(i.properties.name, 1);
            trigger++;
        } else if (trigger === 1) {
            getCurrentWeather(i.properties.name, 2);
            trigger++;
        } else getCurrentWeather(i.properties.name, 3);
        chart.update();
    }

    async function getCurrentWeather(countryName, gd) { // WeatherAPI https://www.weatherapi.com/api-explorer.aspx
        let url = "https://api.weatherapi.com/v1/forecast.json?key=687f508b47e247bdbd1113110221402&q=" + countryName + "&days=7&aqi=no&alerts=no";
        const response = await fetch(url);
        let apidata = await response.json();
        displayData(apidata, gd, countryName);
        console.log(apidata);
    }

    function displayData(apidata, gd, countryName){
        if(gd === 1){
            // Data variable will store all data received from api call
            for (let i = 0; i < apidata.forecast.forecastday.length; i++) {
                let maxtemp = apidata.forecast.forecastday[i].day.maxtemp_c;
                let day = apidata.forecast.forecastday[i].date;
                graphdata.push(maxtemp);
                labeldata.push(day);
            }
            namedata.push(countryName);
            chart.update();
        }
        else if (gd === 2) {
            for (let i = 0; i < apidata.forecast.forecastday.length; i++) {
                let maxtemp = apidata.forecast.forecastday[i].day.maxtemp_c;
                let day = apidata.forecast.forecastday[i].date;
                graphdata2.push(maxtemp);
                labeldata2.push(day);
            }
            namedata2.push(countryName);
            chart.update();
        }
        else if (gd === 3) {
            for (let i = 0; i < apidata.forecast.forecastday.length; i++) {
                let maxtemp = apidata.forecast.forecastday[i].day.maxtemp_c;
                let day = apidata.forecast.forecastday[i].date;
                graphdata3.push(maxtemp);
                labeldata3.push(day);
            }
            namedata3.push(countryName);
            chart.update();
        }
        document.getElementById("apitemp").innerHTML = "Temperature in " + apidata.location.name + " Is = " + apidata.current.temp_c + " Degrees Celcius";
        document.getElementById("apitemp2").innerHTML = "The Wind in " + apidata.location.name + " Is Blowing at = " + apidata.current.gust_mph + " MPH";
        document.getElementById("apitemp3").innerHTML = "Todays forecast in " + apidata.location.name + " Is " + apidata.current.condition.text;
    }


    function isCovidDataAvailable(countryName){
        let countryID;
        if(countryName === "Austria"){countryID = "at"}
        else if(countryName === "Belgium") {countryID = "be"}
        else if(countryName === "Czech Republic") {countryID = "ch"}
        else if(countryName === "Czech Republic") {countryID = "cz"}
        else if(countryName === "Germany") {countryID = "de"}
        else if(countryName === "England") {countryID = "england"}
        else if(countryName === "Estonia") {countryID = "es"}
        else if(countryName === "Finland") {countryID = "fi"}
        else if(countryName === "France") {countryID = "fr"}
        else if(countryName === "Greece") {countryID = "gr"}
        else if(countryName === "Hungary") {countryID = "hu"}
        else if(countryName === "Ireland") {countryID = "ie"}
        else if(countryName === "Italy") {countryID = "it"}
        else if(countryName === "Netherlands") {countryID = "nl"}
        else if(countryName === "Norway") {countryID = "no"}
        else if(countryName === "Poland") {countryID = "pl"}
        else if(countryName === "Portugal") {countryID = "pt"}
        else if(countryName === "Scotland") {countryID = "scotland"}
        else if(countryName === "Sweden") {countryID = "se"}
        else if(countryName === "England") {countryID = "uk"}
        else if(countryName === "Wales") {countryID = "wales"}
        else if(countryName === 'Spain'){countryID = "es"}
        return countryID;
    }
</script>
